import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime
from docx import Document
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader
import urllib.parse
import os

# Fun√ß√£o de conex√£o
def conectar():
    return sqlite3.connect("ocorrencias.db", check_same_thread=False)

# Criar as tabelas se n√£o existirem
def inicializar_db():
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS alunos (
            cgm TEXT PRIMARY KEY,
            nome TEXT,
            telefone TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS ocorrencias (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            cgm TEXT,
            nome TEXT,
            telefone TEXT,
            respons√°vel TEXT,
            data TEXT,
            turma TEXT,
            descricao TEXT
        )
    """)

    conn.commit()
    conn.close()

# Login
def login():
    st.title("Login üë§")
    usuario = st.text_input("Usu√°rio")
    senha = st.text_input("Senha", type="password")
    if st.button("Entrar"):
        conn = conectar()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM usuarios WHERE usuario=? AND senha=?", (usuario, senha))
        resultado = cursor.fetchone()
        conn.close()
        if resultado:
            st.session_state['logado'] = True
            st.rerun()
        else:
            st.error("Usu√°rio ou senha incorretos!")
            
# Fun√ß√£o para formatar mensagem WhatsApp
def formatar_mensagem_whatsapp(ocorrencias_aluno, nome_aluno):
    """Formata as ocorr√™ncias de um aluno espec√≠fico para envio via WhatsApp"""
    mensagem = f"üìã *RELAT√ìRIO DE OCORR√äNCIAS*\n"
    mensagem += f"üë§ *Aluno:* {nome_aluno}\n"
    mensagem += f"üìÖ *Data do Relat√≥rio:* {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}\n"
    mensagem += "="*30 + "\n\n"
    
    for i, (cgm, nome, data, desc, telefone) in enumerate(ocorrencias_aluno, 1):
        # Formatar data para exibi√ß√£o
        try:
            data_formatada = datetime.strptime(data, "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y √†s %H:%M")
        except:
            data_formatada = data
            
        mensagem += f"üî∏ *Ocorr√™ncia {i}*\n"
        mensagem += f"üìÖ Data: {data_formatada}\n"
        mensagem += f"üìù Descri√ß√£o: {desc}\n"
        mensagem += "-"*25 + "\n\n"
    
    mensagem += "üë®‚Äçüè´ *Escola [CCM Prof¬∫ Luiz Carlos de Paula e Souza ]*\n"
    mensagem += "üìû Contato: [41 3348-4165]\n\n"
    mensagem += "_Este relat√≥rio foi gerado automaticamente pelo Sistema de Ocorr√™ncias._"
    
    return mensagem

# Aba: Cadastro de Alunos
def pagina_cadastro_alunos():
    st.header("Cadastro de Alunos üë¶üëß")

    cgm = st.text_input("CGM")
    nome = st.text_input("Nome")
    data_nascimento = st.date_input("Data de Nascimento")
    telefone = st.text_input("Telefone")
    responsavel = st.text_input("Respons√°vel")
    data = st.date_input("Data de Cadastro")
    turma = st.text_input("Turma")


    if st.button("Salvar Aluno"):
        if cgm and nome:
            conn = conectar()
            cursor = conn.cursor()
            cursor.execute("INSERT OR REPLACE INTO alunos (cgm, nome, telefone) VALUES (?, ?, ?)", (cgm, nome, telefone))
            conn.commit()
            conn.close()
            st.success("Aluno salvo com sucesso!")
        else:
            st.warning("Preencha pelo menos o CGM e o Nome.")

    # Importar via TXT
    st.subheader("Importar Alunos via TXT")
    arquivo_txt = st.file_uploader("Escolha o arquivo TXT", type=["txt"])
    if arquivo_txt is not None:
        df = pd.read_csv(arquivo_txt, sep=",", header=None, names=["CGM", "Nome", "Telefone"])
        st.dataframe(df)
        if st.button("Importar Alunos do TXT"):
            conn = conectar()
            cursor = conn.cursor()
            for index, row in df.iterrows():
                cursor.execute("INSERT OR REPLACE INTO alunos (cgm, nome, telefone) VALUES (?, ?, ?)", (row["CGM"], row["Nome"], row["Telefone"]))
            conn.commit()
            conn.close()
            st.success("Importa√ß√£o conclu√≠da!")

# Aba: Cadastro de Usu√°rios
def pagina_cadastro_usuario():
    st.header("Cadastro de Usu√°rio üßë‚Äçüíº")
    nome = st.text_input("Nome completo")
    usuario = st.text_input("Usu√°rio")
    senha = st.text_input("Senha", type="password")
    setor = st.text_input("Setor")

    if st.button("Cadastrar Usu√°rio"):
        conn = conectar()
        cursor = conn.cursor()
        try:
            cursor.execute("""
                INSERT INTO usuarios (nome, usuario, senha, setor)
                VALUES (?, ?, ?, ?)
            """, (nome, usuario, senha, setor))
            conn.commit()
            st.success("Usu√°rio cadastrado!")
        except sqlite3.IntegrityError:
            st.error("Usu√°rio j√° existe!")
        finally:
            conn.close()

# Aba: Lista de Alunos
def pagina_lista_alunos():
    st.header(" üìÑ Lista de Alunos (Ordem Alfab√©tica)")

    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("SELECT cgm, nome, telefone FROM alunos ORDER BY nome ASC")
    alunos = cursor.fetchall()
    conn.close()

    if alunos:
        df = pd.DataFrame(alunos, columns=["CGM", "Nome", "Telefone"])
        st.dataframe(df)
    else:
        st.warning("Nenhum aluno cadastrado.")

def pagina_ocorrencias():
    st.header("Registro de Ocorr√™ncias üìã ")

    cgm_busca = st.text_input("CGM do aluno")
    nome, telefone = "", ""
    if cgm_busca:
        conn = conectar()
        cursor = conn.cursor()
        cursor.execute("SELECT nome, telefone FROM alunos WHERE cgm=?", (cgm_busca,))
        resultado = cursor.fetchone()
        conn.close()
        if resultado:
            nome, telefone = resultado
            st.info(f"Nome: {nome} | Telefone: {telefone}")

    descricao = st.text_area("Descri√ß√£o da Ocorr√™ncia")

    if st.button("Salvar Ocorr√™ncia"):
        if cgm_busca and descricao:
            data_atual = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            conn = conectar()
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO ocorrencias (cgm, nome, telefone, data, descricao)
                VALUES (?, ?, ?, ?, ?)
            """, (cgm_busca, nome, telefone, data_atual, descricao))
            conn.commit()
            conn.close()
            st.success("Ocorr√™ncia salva!")
            st.experimental_rerun()
        else:
            st.warning("Preencha CGM e descri√ß√£o.")

    # Listar ocorr√™ncias
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("SELECT id, cgm, nome, data, descricao FROM ocorrencias ORDER BY data DESC")
    ocorrencias = cursor.fetchall()
    conn.close()

    if ocorrencias:
        st.subheader("üìã Ocorr√™ncias Registradas")
        
        for id, cgm, nome, data, desc in ocorrencias:
            with st.expander(f"{id} - {nome} ({cgm}) - {data}"):
                st.write("**Descri√ß√£o atual:**")
                st.write(desc)
                
                # Bot√µes de a√ß√£o
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button(f"‚úèÔ∏è Alterar {id}", key=f"alt_{id}"):
                        st.session_state[f"editando_{id}"] = True
                        st.rerun()
                
                with col2:
                    if st.button(f"üóëÔ∏è Excluir {id}", key=f"del_{id}"):
                        conn = conectar()
                        cursor = conn.cursor()
                        cursor.execute("DELETE FROM ocorrencias WHERE id=?", (id,))
                        conn.commit()
                        conn.close()
                        st.success("Ocorr√™ncia exclu√≠da!")
                        st.rerun()
                
                # Formul√°rio de edi√ß√£o
                if st.session_state.get(f"editando_{id}", False):
                    st.markdown("---")
                    st.write("**‚úèÔ∏è Editando Ocorr√™ncia:**")
                    
                    nova_descricao = st.text_area(
                        "Nova descri√ß√£o:", 
                        value=desc, 
                        key=f"nova_desc_{id}",
                        height=100
                    )
                    
                    col_salvar, col_cancelar = st.columns(2)
                    
                    with col_salvar:
                        if st.button(f"üíæ Salvar", key=f"save_{id}"):
                            if nova_descricao.strip():
                                conn = conectar()
                                cursor = conn.cursor()
                                cursor.execute(
                                    "UPDATE ocorrencias SET descricao=? WHERE id=?", 
                                    (nova_descricao.strip(), id)
                                )
                                conn.commit()
                                conn.close()
                                
                                # Limpar estado de edi√ß√£o
                                st.session_state[f"editando_{id}"] = False
                                st.success("Ocorr√™ncia alterada com sucesso!")
                                st.rerun()
                            else:
                                st.warning("A descri√ß√£o n√£o pode estar vazia!")
                    
                    with col_cancelar:
                        if st.button(f"‚ùå Cancelar", key=f"cancel_{id}"):
                            st.session_state[f"editando_{id}"] = False
                            st.rerun()
    else:
        st.info("Nenhuma ocorr√™ncia registrada ainda.")
# Aba: Exportar Relat√≥rios
def pagina_exportar():
    st.header("Exportar Relat√≥rio de Ocorr√™ncias üìÑ")

    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("SELECT cgm, nome, data, descricao, telefone FROM ocorrencias ORDER BY nome, data")
    resultados = cursor.fetchall()
    conn.close()

    if not resultados:
        st.warning("Nenhuma ocorr√™ncia para exportar.")
        return

    # Op√ß√£o para escolher exporta√ß√£o
    opcao_export = st.radio(
        "Escolha o tipo de exporta√ß√£o:",
        ["Relat√≥rio Completo", "Por Aluno Espec√≠fico"]
    )

    if opcao_export == "Por Aluno Espec√≠fico":
        # Obter lista de alunos com ocorr√™ncias
        alunos_com_ocorrencias = list(set([(cgm, nome) for cgm, nome, _, _, _ in resultados]))
        alunos_nomes = [f"{nome} (CGM: {cgm})" for cgm, nome in alunos_com_ocorrencias]
        
        if alunos_nomes:
            aluno_selecionado = st.selectbox("Selecione o aluno:", alunos_nomes)
            cgm_selecionado = aluno_selecionado.split("CGM: ")[1].replace(")", "")
            nome_selecionado = aluno_selecionado.split(" (CGM:")[0]
            
            # Filtrar ocorr√™ncias do aluno selecionado
            ocorrencias_aluno = [r for r in resultados if r[0] == cgm_selecionado]
            
            # Bot√µes de exporta√ß√£o para aluno espec√≠fico
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üìÑ Word"):
                    doc = Document()
                    try:
                        doc.add_picture("CABE√áARIOAPP.png", width=doc.sections[0].page_width - doc.sections[0].left_margin - doc.sections[0].right_margin)
                    except:
                        pass
                    doc.add_heading(f"Relat√≥rio de Ocorr√™ncias - {nome_selecionado}", 0)
                    
                    for cgm, nome, data, desc, telefone in ocorrencias_aluno:
                        doc.add_paragraph(f"CGM: {cgm}\nNome: {nome}\nData: {data}\nTelefone: {telefone}\nDescri√ß√£o: {desc}\n----------------------")
                    
                    doc.add_paragraph("\n\nAssinatura do Servidor: ____________________________\nAssinatura do Respons√°vel: ____________________________\nData: ____/____/______")
                    caminho_word = f"relatorio_{nome_selecionado.replace(' ', '_')}.docx"
                    doc.save(caminho_word)
                    
                    with open(caminho_word, "rb") as f:
                        st.download_button("üì• Baixar Word", f, file_name=caminho_word)
            
            with col2:
                if st.button("üìÑ PDF"):
                    caminho_pdf = f"relatorio_{nome_selecionado.replace(' ', '_')}.pdf"
                    c = canvas.Canvas(caminho_pdf, pagesize=A4)
                    
                    try:
                        logo = ImageReader("CABE√áARIOAPP.png")
                        c.drawImage(logo, 50, 750, width=500, preserveAspectRatio=True)
                    except:
                        pass
                    
                    y = 700
                    c.drawString(50, y, f"Relat√≥rio de Ocorr√™ncias - {nome_selecionado}")
                    y -= 30
                    
                    for cgm, nome, data, desc, telefone in ocorrencias_aluno:
                        texto = f"CGM: {cgm}\nNome: {nome}\nData: {data}\nTelefone: {telefone}\nDescri√ß√£o: {desc}\n----------------------\n"
                        for linha in texto.split('\n'):
                            c.drawString(50, y, linha)
                            y -= 15
                            if y < 80:
                                c.showPage()
                                try:
                                    c.drawImage(logo, 50, 750, width=500, preserveAspectRatio=True)
                                except:
                                    pass
                                y = 700
                    
                    # √Årea de assinatura
                    y -= 30
                    c.drawString(50, y, "Assinatura do Servidor: ____________________________")
                    y -= 20
                    c.drawString(50, y, "Assinatura do Respons√°vel: ____________________________")
                    y -= 20
                    c.drawString(50, y, "Data: ____/____/______")
                    c.save()
                    
                    with open(caminho_pdf, "rb") as f:
                        st.download_button("üì• Baixar PDF", f, file_name=caminho_pdf)
            
            with col3:
                if st.button("üì± WhatsApp"):
                    # Obter telefone do aluno
                    conn = conectar()
                    cursor = conn.cursor()
                    cursor.execute("SELECT telefone FROM alunos WHERE cgm=?", (cgm_selecionado,))
                    tel_result = cursor.fetchone()
                    conn.close()
                    
                    if tel_result and tel_result[0]:
                        telefone_aluno = tel_result[0]
                        mensagem = formatar_mensagem_whatsapp(ocorrencias_aluno, nome_selecionado)
                        
                        # Mostrar preview da mensagem
                        with st.expander("üì± Preview da Mensagem WhatsApp"):
                            st.text(mensagem)
                        
                        numero = telefone_aluno.replace("(", "").replace(")", "").replace("-", "").replace(" ", "")
                        mensagem_encoded = urllib.parse.quote(mensagem)
                        link_whatsapp = f"https://api.whatsapp.com/send?phone=55{numero}&text={mensagem_encoded}"
                        
                        st.markdown(f"[üëâ Enviar Relat√≥rio via WhatsApp para {telefone_aluno}]({link_whatsapp})")
                    else:
                        st.warning("Telefone n√£o cadastrado para este aluno.")

    else:
        # Exporta√ß√£o completa (c√≥digo original)
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìÑ Exportar para Word"):
                doc = Document()
                try:
                    doc.add_picture("CABE√áARIOAPP.png", width=doc.sections[0].page_width - doc.sections[0].left_margin - doc.sections[0].right_margin)
                except:
                    pass
                doc.add_heading("Relat√≥rio de Ocorr√™ncias", 0)
                for cgm, nome, data, desc, telefone in resultados:
                    doc.add_paragraph(f"CGM: {cgm}\nNome: {nome}\nData: {data}\nTelefone: {telefone}\nDescri√ß√£o: {desc}\n----------------------")
                doc.add_paragraph("\n\nAssinatura do Servidor: ____________________________\nAssinatura do Respons√°vel: ____________________________\nData: ____/____/______")
                caminho_word = "relatorio_ocorrencias.docx"
                doc.save(caminho_word)
                with open(caminho_word, "rb") as f:
                    st.download_button("üì• Baixar Word", f, file_name=caminho_word)

        with col2:
            if st.button("üìÑ Exportar para PDF"):
                caminho_pdf = "relatorio_ocorrencias.pdf"
                c = canvas.Canvas(caminho_pdf, pagesize=A4)
                try:
                    logo = ImageReader("CABE√áARIOAPP.png")
                    c.drawImage(logo, 50, 750, width=500, preserveAspectRatio=True)
                except:
                    pass
                y = 700
                for cgm, nome, data, desc, telefone in resultados:
                    texto = f"CGM: {cgm}\nNome: {nome}\nData: {data}\nTelefone: {telefone}\nDescri√ß√£o: {desc}\n----------------------\n"
                    for linha in texto.split('\n'):
                        c.drawString(50, y, linha)
                        y -= 15
                        if y < 80:
                            c.showPage()
                            try:
                                c.drawImage(logo, 50, 750, width=500, preserveAspectRatio=True)
                            except:
                                pass
                            y = 700
                # √Årea de assinatura
                y -= 30
                c.drawString(50, y, "Assinatura do Servidor: ____________________________")
                y -= 20
                c.drawString(50, y, "Assinatura do Respons√°vel: ____________________________")
                y -= 20
                c.drawString(50, y, "Data: ____/____/______")
                c.save()
                with open(caminho_pdf, "rb") as f:
                    st.download_button("üì• Baixar PDF", f, file_name=caminho_pdf)

        # Se√ß√£o para envio via WhatsApp por aluno
        st.subheader("üì± Envio via WhatsApp")
        
        # Agrupar ocorr√™ncias por aluno
        ocorrencias_por_aluno = {}
        for cgm, nome, data, desc, telefone in resultados:
            if nome not in ocorrencias_por_aluno:
                ocorrencias_por_aluno[nome] = []
            ocorrencias_por_aluno[nome].append((cgm, nome, data, desc, telefone))
        
        for nome_aluno, ocorrencias_aluno in ocorrencias_por_aluno.items():
            with st.expander(f"üì± WhatsApp - {nome_aluno}"):
                # Obter telefone do primeiro registro (todos devem ser iguais)
                telefone_aluno = ocorrencias_aluno[0][4]
                
                if telefone_aluno:
                    mensagem = formatar_mensagem_whatsapp(ocorrencias_aluno, nome_aluno)
                    
                    # Preview da mensagem
                    st.text_area("Preview da mensagem:", mensagem, height=200, key=f"preview_{nome_aluno}")
                    
                    numero = telefone_aluno.replace("(", "").replace(")", "").replace("-", "").replace(" ", "")
                    mensagem_encoded = urllib.parse.quote(mensagem)
                    link_whatsapp = f"https://api.whatsapp.com/send?phone=55{numero}&text={mensagem_encoded}"
                    
                    st.markdown(f"[üëâ Enviar para {telefone_aluno}]({link_whatsapp})")
                else:
                    st.warning("Telefone n√£o dispon√≠vel para este aluno.")

# Login
def login():
    st.title("Login üë§")
    usuario = st.text_input("Usu√°rio")
    senha = st.text_input("Senha", type="password")
    if st.button("Entrar"):
        conn = conectar()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM usuarios WHERE usuario=? AND senha=?", (usuario, senha))
        resultado = cursor.fetchone()
        conn.close()
        if resultado:
            st.session_state['logado'] = True
            st.rerun()
        else:
            st.error("Usu√°rio ou senha incorretos!")



# Menu principal
def menu():
    st.sidebar.image("BRAS√ÉO.png", width=200)
    opcoes = ["Cadastro de Alunos", "Ocorr√™ncias", "Exportar Relat√≥rios", "Cadastro de Usu√°rio", "Lista de Alunos"]
    escolha = st.sidebar.selectbox("Menu", opcoes)

    if escolha == "Cadastro de Alunos":
        pagina_cadastro_alunos()
    elif escolha == "Ocorr√™ncias":
        pagina_ocorrencias()
    elif escolha == "Exportar Relat√≥rios":
        pagina_exportar()
    elif escolha == "Cadastro de Usu√°rio":
        pagina_cadastro_usuario()
    elif escolha == "Lista de Alunos":
        pagina_lista_alunos()
    elif menu == "Backup Manual":
        botao_backup_manual()

# Execu√ß√£o
if "logado" not in st.session_state:
    st.session_state["logado"] = False

inicializar_db()

if not st.session_state["logado"]:
    login()
else:
    menu()
