import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
from docx import Document
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader
import urllib.parse
import os
import shutil
import glob

# ========== Fun√ß√£o de Conex√£o ==========
def conectar():
    return sqlite3.connect("ocorrencias.db", check_same_thread=False)

# ========== Inicializar Banco ==========
def inicializar_db():
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS alunos (
            cgm TEXT PRIMARY KEY,
            nome TEXT,
            telefone TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS ocorrencias (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            cgm TEXT,
            nome TEXT,
            telefone TEXT,
            data TEXT,
            descricao TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS usuarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT,
            usuario TEXT UNIQUE,
            senha TEXT,
            setor TEXT
        )
    """)
    conn.commit()
    conn.close()

# ========== Fun√ß√£o de Backup ==========
def fazer_backup():
    if not os.path.exists("backups"):
        os.makedirs("backups")
    agora = datetime.now().strftime("%Y%m%d_%H%M%S")
    shutil.copy("ocorrencias.db", f"backups/ocorrencias_backup_{agora}.db")

def limpar_backups_antigos():
    sete_dias_atras = datetime.now() - timedelta(days=7)
    for arquivo in glob.glob("backups/ocorrencias_backup_*.db"):
        timestamp_str = arquivo.split("_backup_")[1].replace(".db", "")
        try:
            data_arquivo = datetime.strptime(timestamp_str, "%Y%m%d_%H%M%S")
            if data_arquivo < sete_dias_atras:
                os.remove(arquivo)
        except:
            pass

# ========== Fun√ß√£o de Login ==========
def login():
    st.title("Login üë§")
    usuario = st.text_input("Usu√°rio")
    senha = st.text_input("Senha", type="password")
    if st.button("Entrar"):
        conn = conectar()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM usuarios WHERE usuario=? AND senha=?", (usuario, senha))
        if cursor.fetchone():
            st.session_state["logado"] = True
            st.experimental_rerun()
        else:
            st.error("Usu√°rio ou senha inv√°lidos.")
        conn.close()

# ========== Fun√ß√£o Cadastro de Alunos ==========
def pagina_cadastro_alunos():
    st.header("Cadastro de Alunos üë¶üëß")
    cgm = st.text_input("CGM")
    nome = st.text_input("Nome")
    telefone = st.text_input("Telefone")
    if st.button("Salvar Aluno"):
        conn = conectar()
        cursor = conn.cursor()
        cursor.execute("INSERT OR REPLACE INTO alunos VALUES (?, ?, ?)", (cgm, nome, telefone))
        conn.commit()
        conn.close()
        st.success("Aluno salvo!")

    st.subheader("Importar Alunos via TXT")
    arquivo_txt = st.file_uploader("Escolha o TXT", type=["txt"])
    if arquivo_txt and st.button("Importar Alunos"):
        df = pd.read_csv(arquivo_txt, sep=",", names=["CGM", "Nome", "Telefone"], header=None)
        conn = conectar()
        cursor = conn.cursor()
        for _, row in df.iterrows():
            cursor.execute("INSERT OR REPLACE INTO alunos VALUES (?, ?, ?)", (row["CGM"], row["Nome"], row["Telefone"]))
        conn.commit()
        conn.close()
        st.success("Importa√ß√£o conclu√≠da!")

# ========== Fun√ß√£o Registro de Ocorr√™ncias ==========
def pagina_ocorrencias():
    st.header("Registro de Ocorr√™ncias üìã")
    cgm = st.text_input("CGM do Aluno")
    conn = conectar()
    cursor = conn.cursor()
    nome = telefone = ""
    if cgm:
        cursor.execute("SELECT nome, telefone FROM alunos WHERE cgm=?", (cgm,))
        resultado = cursor.fetchone()
        if resultado:
            nome, telefone = resultado
            st.info(f"Nome: {nome} | Telefone: {telefone}")

    descricao = st.text_area("Descri√ß√£o da Ocorr√™ncia")

    if st.button("Salvar Ocorr√™ncia"):
        if cgm and descricao:
            fazer_backup()
            limpar_backups_antigos()
            data = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute("INSERT INTO ocorrencias (cgm, nome, telefone, data, descricao) VALUES (?, ?, ?, ?, ?)", (cgm, nome, telefone, data, descricao))
            conn.commit()
            st.success("Ocorr√™ncia salva!")

    st.subheader("Lista de Ocorr√™ncias")
    cursor.execute("SELECT id, cgm, nome, data, descricao FROM ocorrencias ORDER BY data DESC")
    ocorrencias = cursor.fetchall()
    for id, cgm, nome, data, desc in ocorrencias:
        with st.expander(f"{id} - {nome} ({data})"):
            st.write(desc)
            col1, col2 = st.columns(2)
            if col1.button(f"Alterar {id}"):
                nova = st.text_area(f"Nova descri√ß√£o {id}", value=desc, key=f"alt_{id}")
                if col1.button(f"Salvar {id}"):
                    cursor.execute("UPDATE ocorrencias SET descricao=? WHERE id=?", (nova, id))
                    conn.commit()
                    st.success("Alterado!")
                    st.experimental_rerun()
            if col2.button(f"Excluir {id}"):
                fazer_backup()
                limpar_backups_antigos()
                cursor.execute("DELETE FROM ocorrencias WHERE id=?", (id,))
                conn.commit()
                st.success("Exclu√≠do!")
                st.experimental_rerun()
    conn.close()

# ========== Fun√ß√£o Exporta√ß√£o ==========
def pagina_exportar():
    st.header("Exportar Relat√≥rio üìÑ")
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("SELECT cgm, nome, data, descricao, telefone FROM ocorrencias ORDER BY nome, data")
    ocorrencias = cursor.fetchall()
    conn.close()

    if not ocorrencias:
        st.warning("Sem ocorr√™ncias para exportar.")
        return

    doc = Document()
    try:
        doc.add_picture("CABE√áARIOAPP.png", width=doc.sections[0].page_width - doc.sections[0].left_margin - doc.sections[0].right_margin)
    except:
        pass
    doc.add_heading("Relat√≥rio de Ocorr√™ncias", 0)
    for cgm, nome, data, desc, telefone in ocorrencias:
        doc.add_paragraph(f"CGM: {cgm}\nNome: {nome}\nData: {data}\nTelefone: {telefone}\nDescri√ß√£o: {desc}\n----------------------")
    caminho_word = "relatorio_ocorrencias.docx"
    doc.save(caminho_word)
    with open(caminho_word, "rb") as f:
        st.download_button("üì• Baixar Word", f, file_name=caminho_word)

# ========== Fun√ß√£o Cadastro de Usu√°rio ==========
def pagina_cadastro_usuario():
    st.header("Cadastro de Usu√°rio üßë‚Äçüíº")
    nome = st.text_input("Nome")
    usuario = st.text_input("Usu√°rio")
    senha = st.text_input("Senha", type="password")
    setor = st.text_input("Setor")
    if st.button("Cadastrar"):
        conn = conectar()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO usuarios (nome, usuario, senha, setor) VALUES (?, ?, ?, ?)", (nome, usuario, senha, setor))
        conn.commit()
        conn.close()
        st.success("Usu√°rio cadastrado!")

# ========== Fun√ß√£o Lista de Alunos ==========
def pagina_lista_alunos():
    st.header("Lista de Alunos üìÑ")
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("SELECT cgm, nome, telefone FROM alunos ORDER BY nome")
    alunos = cursor.fetchall()
    conn.close()
    df = pd.DataFrame(alunos, columns=["CGM", "Nome", "Telefone"])
    st.dataframe(df)

# ========== Menu Principal ==========
def menu():
    st.sidebar.image("BRAS√ÉO.png", width=200)
    pagina = st.sidebar.selectbox("Menu", ["Cadastro de Alunos", "Ocorr√™ncias", "Exportar Relat√≥rios", "Cadastro de Usu√°rio", "Lista de Alunos"])
    if pagina == "Cadastro de Alunos":
        pagina_cadastro_alunos()
    elif pagina == "Ocorr√™ncias":
        pagina_ocorrencias()
    elif pagina == "Exportar Relat√≥rios":
        pagina_exportar()
    elif pagina == "Cadastro de Usu√°rio":
        pagina_cadastro_usuario()
    elif pagina == "Lista de Alunos":
        pagina_lista_alunos()

# ========== Execu√ß√£o ==========
inicializar_db()
if "logado" not in st.session_state:
    st.session_state["logado"] = False

if not st.session_state["logado"]:
    login()
else:
    menu()
